var N=null,E="",T="t",U="u",searchIndex={};
var R=["smallvec","Constructs a new `SmallVec` on the stack from an `A`…","usize","extend_from_slice","result","into_iter","try_from","borrow","type_id","typeid","borrow_mut","try_into","size_hint","next_back","option","ordering","index_mut","ExtendFromSlice","SmallVec","IntoIter","ropeslice","len_bytes","len_chars","len_lines","byte_to_char","Returns the char index of the given byte.","byte_to_line","Returns the line index of the given byte.","char_to_byte","Returns the byte index of the given char.","char_to_line","Returns the line index of the given char.","line_to_byte","Returns the byte index of the start of the given line.","line_to_char","Returns the char index of the start of the given line.","Returns the byte at `byte_idx`.","Returns the char at `char_idx`.","Returns the line at `line_idx`.","chunk_at_byte","Returns the chunk containing the given byte index.","chunk_at_char","Returns the chunk containing the given char index.","chunk_at_line_break","Returns the chunk containing the given line break.","to_owned","clone_into","to_string","ropey::iter","ropebuilder","string","partial_cmp","formatter","from_iter","RopeBuilder","RopeSlice","capacity","shrink_to_fit","default"];
searchIndex["ropey"]={"doc":"Ropey is a utf8 text rope for Rust. It is fast, robust,…","i":[[3,"Rope","ropey","A utf8 text rope.",N,N],[3,R[54],E,"An efficient incremental `Rope` builder.",N,N],[3,R[55],E,"An immutable view into part of a `Rope`.",N,N],[11,"new",E,"Creates an empty `Rope`.",0,[[],["self"]]],[11,"from_str",E,"Creates a `Rope` from a string slice.",0,[[["str"]],["self"]]],[11,"from_reader",E,"Creates a `Rope` from the output of a reader.",0,[[[T]],[R[4]]]],[11,"write_to",E,"Writes the contents of the `Rope` to a writer.",0,[[["self"],[T]],[R[4]]]],[11,R[21],E,"Total number of bytes in the `Rope`.",0,[[["self"]],[R[2]]]],[11,R[22],E,"Total number of chars in the `Rope`.",0,[[["self"]],[R[2]]]],[11,R[23],E,"Total number of lines in the `Rope`.",0,[[["self"]],[R[2]]]],[11,R[56],E,"Total size of the `Rope`'s text buffer space, in bytes.",0,[[["self"]],[R[2]]]],[11,R[57],E,"Shrinks the `Rope`'s capacity to the minimum possible.",0,[[["self"]]]],[11,"insert",E,"Inserts `text` at char index `char_idx`.",0,[[["self"],[R[2]],["str"]]]],[11,"insert_char",E,"Inserts a single char `ch` at char index `char_idx`.",0,[[["self"],[R[2]],["char"]]]],[11,"remove",E,"Removes the text in the given char index range.",0,[[["self"],["r"]]]],[11,"split_off",E,"Splits the `Rope` at `char_idx`, returning the right part…",0,[[["self"],[R[2]]],["self"]]],[11,"append",E,"Appends a `Rope` to the end of this one, consuming the…",0,[[["self"],["self"]]]],[11,R[24],E,R[25],0,[[["self"],[R[2]]],[R[2]]]],[11,R[26],E,R[27],0,[[["self"],[R[2]]],[R[2]]]],[11,R[28],E,R[29],0,[[["self"],[R[2]]],[R[2]]]],[11,R[30],E,R[31],0,[[["self"],[R[2]]],[R[2]]]],[11,R[32],E,R[33],0,[[["self"],[R[2]]],[R[2]]]],[11,R[34],E,R[35],0,[[["self"],[R[2]]],[R[2]]]],[11,"byte",E,R[36],0,[[["self"],[R[2]]],["u8"]]],[11,"char",E,R[37],0,[[["self"],[R[2]]],["char"]]],[11,"line",E,R[38],0,[[["self"],[R[2]]],[R[20]]]],[11,R[39],E,R[40],0,N],[11,R[41],E,R[42],0,N],[11,R[43],E,R[44],0,N],[11,"slice",E,"Gets an immutable slice of the `Rope`.",0,[[["self"],["r"]],[R[20]]]],[11,"bytes",E,"Creates an iterator over the bytes of the `Rope`.",0,[[["self"]],["bytes"]]],[11,"chars",E,"Creates an iterator over the chars of the `Rope`.",0,[[["self"]],["chars"]]],[11,"lines",E,"Creates an iterator over the lines of the `Rope`.",0,[[["self"]],["lines"]]],[11,"chunks",E,"Creates an iterator over the chunks of the `Rope`.",0,[[["self"]],["chunks"]]],[11,"new",E,"Creates a new RopeBuilder, ready for input.",1,[[],["self"]]],[11,"append",E,"Appends `chunk` to the end of the in-progress `Rope`.",1,[[["self"],["str"]]]],[11,"finish",E,"Finishes the build, and returns the `Rope`.",1,[[["self"]],["rope"]]],[11,R[21],E,"Total number of bytes in the `RopeSlice`.",2,[[["self"]],[R[2]]]],[11,R[22],E,"Total number of chars in the `RopeSlice`.",2,[[["self"]],[R[2]]]],[11,R[23],E,"Total number of lines in the `RopeSlice`.",2,[[["self"]],[R[2]]]],[11,R[24],E,R[25],2,[[["self"],[R[2]]],[R[2]]]],[11,R[26],E,R[27],2,[[["self"],[R[2]]],[R[2]]]],[11,R[28],E,R[29],2,[[["self"],[R[2]]],[R[2]]]],[11,R[30],E,R[31],2,[[["self"],[R[2]]],[R[2]]]],[11,R[32],E,R[33],2,[[["self"],[R[2]]],[R[2]]]],[11,R[34],E,R[35],2,[[["self"],[R[2]]],[R[2]]]],[11,"byte",E,R[36],2,[[["self"],[R[2]]],["u8"]]],[11,"char",E,R[37],2,[[["self"],[R[2]]],["char"]]],[11,"line",E,R[38],2,[[["self"],[R[2]]],[R[20]]]],[11,R[39],E,R[40],2,N],[11,R[41],E,R[42],2,N],[11,R[43],E,R[44],2,N],[11,"as_str",E,"Returns the entire contents of the `RopeSlice` as a `&str`…",2,[[["self"]],[R[14],["str"]]]],[11,"slice",E,"Returns a sub-slice of the `RopeSlice` in the given char…",2,[[["self"],["r"]],["self"]]],[11,"bytes",E,"Creates an iterator over the bytes of the `RopeSlice`.",2,[[["self"]],["bytes"]]],[11,"chars",E,"Creates an iterator over the chars of the `RopeSlice`.",2,[[["self"]],["chars"]]],[11,"lines",E,"Creates an iterator over the lines of the `RopeSlice`.",2,[[["self"]],["lines"]]],[11,"chunks",E,"Creates an iterator over the chunks of the `RopeSlice`.",2,[[["self"]],["chunks"]]],[0,"iter",E,"Iterators over a `Rope`'s data.",N,N],[3,"Bytes",R[48],"An iterator over a `Rope`'s bytes.",N,N],[3,"Chars",E,"An iterator over a `Rope`'s chars.",N,N],[3,"Lines",E,"An iterator over a `Rope`'s lines.",N,N],[3,"Chunks",E,"An iterator over a `Rope`'s contiguous `str` chunks.",N,N],[0,"str_utils","ropey","Utility functions for utf8 string slices.",N,N],[5,"byte_to_char_idx","ropey::str_utils","Converts from byte-index to char-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"byte_to_line_idx",E,"Converts from byte-index to line-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"char_to_byte_idx",E,"Converts from char-index to byte-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"char_to_line_idx",E,"Converts from char-index to line-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"line_to_byte_idx",E,"Converts from line-index to byte-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[5,"line_to_char_idx",E,"Converts from line-index to char-index in a string slice.",N,[[["str"],[R[2]]],[R[2]]]],[11,R[47],"ropey",E,0,[[["self"]],[R[50]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[45],E,E,0,[[["self"]],[T]]],[11,R[46],E,E,0,N],[11,R[6],E,E,0,[[[U]],[R[4]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[45],E,E,1,[[["self"]],[T]]],[11,R[46],E,E,1,N],[11,R[6],E,E,1,[[[U]],[R[4]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[4]]]],[11,R[47],E,E,2,[[["self"]],[R[50]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[45],E,E,2,[[["self"]],[T]]],[11,R[46],E,E,2,N],[11,R[6],E,E,2,[[[U]],[R[4]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[4]]]],[11,R[5],R[48],E,3,[[["self"]],["i"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[4]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[4]]]],[11,R[5],E,E,4,[[["self"]],["i"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[4]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[4]]]],[11,R[5],E,E,5,[[["self"]],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[6],E,E,5,[[[U]],[R[4]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[R[9]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[4]]]],[11,R[5],E,E,6,[[["self"]],["i"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[6],E,E,6,[[[U]],[R[4]]]],[11,R[7],E,E,6,[[["self"]],[T]]],[11,R[8],E,E,6,[[["self"]],[R[9]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[4]]]],[11,"next",E,E,3,[[["self"]],[R[14],["u8"]]]],[11,"next",E,E,4,[[["self"]],[R[14],["char"]]]],[11,"next",E,E,5,[[["self"]],[R[14],[R[20]]]]],[11,"next",E,E,6,[[["self"]],[R[14],["str"]]]],[11,"eq","ropey",E,0,[[["self"],["rope"]],["bool"]]],[11,"eq",E,E,0,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,0,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[50]]],["bool"]]],[11,"eq",E,E,0,[[["self"],["cow"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[20]]],["bool"]]],[11,"eq",E,E,2,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["str"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[50]]],["bool"]]],[11,"eq",E,E,2,[[["self"],["cow"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["rope"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[20]]],["bool"]]],[11,R[58],E,E,0,[[],["self"]]],[11,R[58],E,E,1,[[],[R[49]]]],[11,"cmp",E,E,0,[[["self"],["rope"]],[R[15]]]],[11,"cmp",E,E,2,[[["self"],[R[20]]],[R[15]]]],[11,"clone",E,E,0,[[["self"]],["rope"]]],[11,"clone",E,E,1,[[["self"]],[R[49]]]],[11,"clone",E,E,2,[[["self"]],[R[20]]]],[11,"from",E,E,0,[[["str"]],["self"]]],[11,"from",E,E,0,[[["cow",["str"]]],["self"]]],[11,"from",E,E,0,[[[R[50]]],["self"]]],[11,"from",E,E,0,[[[R[20]]],["self"]]],[11,"from",E,E,2,[[["str"]],["self"]]],[11,R[51],E,E,0,[[["self"],["rope"]],[R[14],[R[15]]]]],[11,R[51],E,E,2,[[["self"],[R[20]]],[R[14],[R[15]]]]],[11,"fmt",E,E,0,[[["self"],[R[52]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[52]]],[R[4]]]],[11,R[53],E,E,0,[[[T]],["self"]]],[11,R[53],E,E,0,[[[T]],["self"]]],[11,R[53],E,E,0,[[[T]],["self"]]],[11,"fmt",E,E,0,[[["self"],[R[52]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[52]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[52]]],[R[4]]]]],"p":[[3,"Rope"],[3,R[54]],[3,R[55]],[3,"Bytes"],[3,"Chars"],[3,"Lines"],[3,"Chunks"]]};
searchIndex[R[0]]={"doc":"Small vectors in various sizes. These store a certain…","i":[[3,"Drain",R[0],"An iterator that removes the items from a `SmallVec` and…",N,N],[3,R[18],E,"A `Vec`-like container that can store a small number of…",N,N],[3,R[19],E,"An iterator that consumes a `SmallVec` and yields its…",N,N],[5,"unreachable",E,"Hint to the optimizer that any code path which calls this…",N,N],[8,"VecLike",E,"Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push",E,"Append an element to the vector.",0,[[["self"],[T]]]],[8,R[17],E,"Trait to be implemented by a collection that can be…",N,N],[10,R[3],E,"Extends a collection from a slice of its element type",1,N],[8,"Array",E,"Types that can be used as the backing store for a SmallVec",N,N],[16,"Item",E,"The type of the array's elements.",2,N],[10,"size",E,"Returns the number of items the array can hold.",2,[[],[R[2]]]],[10,"ptr",E,"Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut",E,"Returns a mutable pointer to the first element of the array.",2,N],[11,"new",E,"Construct an empty vector",3,[[],[R[0]]]],[11,"with_capacity",E,"Construct an empty vector with enough capacity…",3,[[[R[2]]],["self"]]],[11,"from_vec",E,"Construct a new `SmallVec` from a `Vec<A::Item>`.",3,[[["vec"]],[R[0]]]],[11,"from_buf",E,R[1],3,[[["a"]],[R[0]]]],[11,"from_buf_and_len",E,R[1],3,[[["a"],[R[2]]],[R[0]]]],[11,"from_buf_and_len_unchecked",E,R[1],3,[[["a"],[R[2]]],[R[0]]]],[11,"set_len",E,"Sets the length of a vector.",3,[[["self"],[R[2]]]]],[11,"inline_size",E,"The maximum number of elements this vector can hold inline",3,[[["self"]],[R[2]]]],[11,"len",E,"The number of elements stored in the vector",3,[[["self"]],[R[2]]]],[11,"is_empty",E,"Returns `true` if the vector is empty",3,[[["self"]],["bool"]]],[11,R[56],E,"The number of items the vector can hold without reallocating",3,[[["self"]],[R[2]]]],[11,"spilled",E,"Returns `true` if the data has spilled into a separate…",3,[[["self"]],["bool"]]],[11,"drain",E,"Empty the vector and return an iterator over its former…",3,[[["self"]],["drain"]]],[11,"push",E,"Append an item to the vector.",3,N],[11,"pop",E,"Remove an item from the end of the vector and return it,…",3,[[["self"]],[R[14]]]],[11,"grow",E,"Re-allocate to set the capacity to `max(new_cap,…",3,[[["self"],[R[2]]]]],[11,"reserve",E,"Reserve capacity for `additional` more elements to be…",3,[[["self"],[R[2]]]]],[11,"reserve_exact",E,"Reserve the minimum capacity for `additional` more…",3,[[["self"],[R[2]]]]],[11,R[57],E,"Shrink the capacity of the vector as much as possible.",3,[[["self"]]]],[11,"truncate",E,"Shorten the vector, keeping the first `len` elements and…",3,[[["self"],[R[2]]]]],[11,"as_slice",E,"Extracts a slice containing the entire vector.",3,N],[11,"as_mut_slice",E,"Extracts a mutable slice of the entire vector.",3,N],[11,"swap_remove",E,"Remove the element at position `index`, replacing it with…",3,N],[11,"clear",E,"Remove all elements from the vector.",3,[[["self"]]]],[11,"remove",E,"Remove and return the element at position `index`,…",3,N],[11,"insert",E,"Insert an element at position `index`, shifting all…",3,N],[11,"insert_many",E,"Insert multiple elements at position `index`, shifting all…",3,[[["self"],[R[2]],["i"]]]],[11,"into_vec",E,"Convert a SmallVec to a Vec, without reallocating if the…",3,[[["self"]],["vec"]]],[11,"into_inner",E,"Convert the SmallVec into an `A` if possible. Otherwise…",3,[[["self"]],[R[4]]]],[11,"retain",E,"Retains only the elements specified by the predicate.",3,[[["self"],["f"]]]],[11,"dedup",E,"Removes consecutive duplicate elements.",3,[[["self"]]]],[11,"dedup_by",E,"Removes consecutive duplicate elements using the given…",3,[[["self"],["f"]]]],[11,"dedup_by_key",E,"Removes consecutive elements that map to the same key.",3,[[["self"],["f"]]]],[11,"from_raw_parts",E,"Creates a `SmallVec` directly from the raw components of…",3,N],[11,"from_slice",E,"Copy the elements from a slice into a new `SmallVec`.",3,N],[11,"insert_from_slice",E,"Copy elements from a slice into the vector at position…",3,N],[11,R[3],E,"Copy elements from a slice and append them to the vector.",3,N],[11,"resize",E,"Resizes the vector so that its length is equal to `len`.",3,N],[11,"from_elem",E,"Creates a `SmallVec` with `n` copies of `elem`. ``` use…",3,N],[14,R[0],E,"Creates a [`SmallVec`] containing the arguments.",N,N],[11,R[5],E,E,4,[[["self"]],["i"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[4]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[4]]]],[11,R[5],E,E,3,[[["self"]],["i"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[45],E,E,3,[[["self"]],[T]]],[11,R[46],E,E,3,N],[11,R[6],E,E,3,[[[U]],[R[4]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[4]]]],[11,R[5],E,E,5,[[["self"]],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[6],E,E,5,[[[U]],[R[4]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[R[9]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[4]]]],[11,"push",E,E,3,N],[11,R[3],E,E,3,N],[11,"as_mut",E,E,3,N],[11,"next",E,E,4,[[["self"]],[R[14]]]],[11,R[12],E,E,4,N],[11,"next",E,E,5,[[["self"]],[R[14]]]],[11,R[12],E,E,5,N],[11,"eq",E,E,3,[[["self"],[R[0]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[0]]],["bool"]]],[11,R[13],E,E,4,[[["self"]],[R[14]]]],[11,R[13],E,E,5,[[["self"]],[R[14]]]],[11,"as_ref",E,E,3,N],[11,R[5],E,E,3,N],[11,R[58],E,E,3,[[],[R[0]]]],[11,"cmp",E,E,3,[[["self"],[R[0]]],[R[15]]]],[11,"clone",E,E,3,[[["self"]],[R[0]]]],[11,"extend",E,E,3,[[["self"],["i"]]]],[11,"from",E,E,3,N],[11,"from",E,E,3,[[["vec"]],[R[0]]]],[11,"from",E,E,3,[[["a"]],[R[0]]]],[11,"drop",E,E,4,[[["self"]]]],[11,"drop",E,E,3,[[["self"]]]],[11,"drop",E,E,5,[[["self"]]]],[11,R[51],E,E,3,[[["self"],[R[0]]],[R[14],[R[15]]]]],[11,"deref",E,E,3,N],[11,"hash",E,E,3,[[["self"],["h"]]]],[11,"deref_mut",E,E,3,N],[11,"index",E,E,3,N],[11,"index",E,E,3,N],[11,"index",E,E,3,N],[11,"index",E,E,3,N],[11,"index",E,E,3,N],[11,R[16],E,E,3,N],[11,R[16],E,E,3,N],[11,R[16],E,E,3,N],[11,R[16],E,E,3,N],[11,R[16],E,E,3,N],[11,R[53],E,E,3,[[["i"]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[52]]],[R[4]]]],[11,R[7],E,E,3,N],[11,"write",E,E,3,N],[11,"write_all",E,E,3,N],[11,"flush",E,E,3,[[["self"]],[R[4]]]],[11,R[10],E,E,3,N]],"p":[[8,"VecLike"],[8,R[17]],[8,"Array"],[3,R[18]],[3,"Drain"],[3,R[19]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);